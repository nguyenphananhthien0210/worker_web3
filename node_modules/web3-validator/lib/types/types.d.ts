/// <reference types="node" />
import { AbiParameter, Optional } from 'web3-types';
import { ErrorObject } from 'ajv';
import { SomeJSONSchema } from 'ajv/dist/types/json-schema';
export { JSONSchemaType } from 'ajv';
export { DataValidateFunction, DataValidationCxt } from 'ajv/dist/types';
export declare type Web3ValidationErrorObject = ErrorObject;
export declare type ValidInputTypes = ArrayBuffer | Buffer | bigint | string | number | boolean;
export declare type EthBaseTypes = 'bool' | 'bytes' | 'string' | 'uint' | 'int' | 'address' | 'tuple';
export declare type EthBaseTypesWithMeta = `string${string}` | `string${string}[${number}]` | `bytes${string}` | `bytes${string}[${number}]` | `address[${number}]` | `bool[${number}]` | `int${string}` | `int${string}[${number}]` | `uint${string}` | `uint${string}[${number}]` | `tuple[]` | `tuple[${number}]`;
export declare type EthExtendedTypes = 'hex' | 'number' | 'blockNumber' | 'blockNumberOrTag' | 'filter' | 'bloom';
export declare type FullValidationSchema = ReadonlyArray<AbiParameter>;
export declare type ShortValidationSchema = ReadonlyArray<string | EthBaseTypes | EthExtendedTypes | EthBaseTypesWithMeta | EthBaseTypesWithMeta | ShortValidationSchema>;
export declare type ValidationSchemaInput = FullValidationSchema | ShortValidationSchema;
export declare type Web3ValidationOptions = {
    readonly silent: boolean;
};
export declare type JsonSchema = Optional<SomeJSONSchema, 'type'> & {
    readonly eth?: string;
};
//# sourceMappingURL=types.d.ts.map