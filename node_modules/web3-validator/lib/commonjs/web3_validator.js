"use strict";
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3Validator = void 0;
const ajv_1 = __importDefault(require("ajv"));
const blake2b_1 = require("ethereum-cryptography/blake2b");
const utils_1 = require("ethereum-cryptography/utils");
const utils_2 = require("./utils");
const eth_1 = require("./keywords/eth");
const errors_1 = require("./errors");
const formats = __importStar(require("./formats"));
class Web3Validator {
    constructor() {
        this._validator = new ajv_1.default({
            strict: true,
            strictSchema: true,
            allErrors: true,
            useDefaults: false,
            // To avoid warnings for not defining `type` for each property
            strictTypes: false,
            // To avoid strict mode error for minItems or maxItems/additionalItems
            strictTuples: false,
        });
        this._validator.addKeyword(eth_1.ethKeyword);
        for (const formatName of Object.keys(formats)) {
            // eslint-disable-next-line import/namespace
            this._validator.addFormat(formatName, formats[formatName]);
        }
    }
    validateJSONSchema(schema, data, options) {
        let errors = [];
        if (!this._validator.validate(schema, data)) {
            errors = this._validator.errors;
        }
        if (options === null || options === void 0 ? void 0 : options.silent) {
            return errors;
        }
        if (errors.length && !(options === null || options === void 0 ? void 0 : options.silent)) {
            throw new errors_1.Web3ValidatorError(errors);
        }
        return undefined;
    }
    validate(schema, data, options = { silent: false }) {
        var _a, _b;
        const jsonSchema = (0, utils_2.ethAbiToJsonSchema)(schema);
        if (Array.isArray(jsonSchema.items) &&
            ((_a = jsonSchema.items) === null || _a === void 0 ? void 0 : _a.length) === 0 &&
            data.length === 0) {
            return undefined;
        }
        if (Array.isArray(jsonSchema.items) &&
            ((_b = jsonSchema.items) === null || _b === void 0 ? void 0 : _b.length) === 0 &&
            data.length !== 0) {
            throw new errors_1.Web3ValidatorError([
                {
                    instancePath: '/0',
                    schemaPath: '/',
                    keyword: 'required',
                    message: 'empty schema against data can not be validated',
                    params: data,
                },
            ]);
        }
        const schemaKey = (0, utils_1.toHex)((0, blake2b_1.blake2b)((0, utils_1.utf8ToBytes)(JSON.stringify(jsonSchema))));
        if (!this._validator.getSchema(schemaKey)) {
            this._validator.addSchema(jsonSchema, schemaKey);
        }
        if (!this._validator.validate(schemaKey, data)) {
            const errors = this._validator.errors;
            if (options === null || options === void 0 ? void 0 : options.silent) {
                return errors;
            }
            if (errors.length && !(options === null || options === void 0 ? void 0 : options.silent)) {
                throw new errors_1.Web3ValidatorError(errors);
            }
        }
        return undefined;
    }
}
exports.Web3Validator = Web3Validator;
//# sourceMappingURL=web3_validator.js.map