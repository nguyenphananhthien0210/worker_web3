"use strict";
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ethKeyword = exports.metaSchema = void 0;
const errors_1 = require("../errors");
const utils_1 = require("../utils");
const validation_1 = require("../validation");
const createErrorObject = (message, value) => ({
    message,
    keyword: 'eth',
    params: { value },
});
exports.metaSchema = {
    title: 'Web3 Ethereum Compatible Types',
    type: 'string',
};
const extraTypes = ['hex', 'number', 'blockNumber', 'blockNumberOrTag', 'filter', 'bloom'];
const compile = (type, parentSchema, it) => {
    var _a, _b;
    const typePropertyPresent = Object.keys(parentSchema).includes('type');
    if (typePropertyPresent) {
        throw new errors_1.Web3ValidatorError([
            {
                keyword: 'eth',
                message: 'Either "eth" or "type" can be presented in schema',
                params: { eth: type },
                instancePath: '',
                schemaPath: (_a = it.schemaPath.str) !== null && _a !== void 0 ? _a : '',
            },
        ]);
    }
    const { baseType } = (0, utils_1.parseBaseType)(type);
    if (!baseType && !extraTypes.includes(type)) {
        throw new errors_1.Web3ValidatorError([
            {
                keyword: 'eth',
                message: `Eth data type "${type}" is not valid`,
                params: { eth: type },
                instancePath: '',
                schemaPath: (_b = it.schemaPath.str) !== null && _b !== void 0 ? _b : '',
            },
        ]);
    }
    const validate = (data) => {
        let result = false;
        if (baseType) {
            // eslint-disable-next-line default-case
            switch (baseType) {
                case 'bool':
                    result = (0, validation_1.isBoolean)(data);
                    break;
                case 'bytes':
                    result = (0, validation_1.isBytes)(data, { abiType: type });
                    break;
                case 'string':
                    result = (0, validation_1.isString)(data);
                    break;
                case 'uint':
                    result = (0, validation_1.isUInt)(data, { abiType: type });
                    break;
                case 'int':
                    result = (0, validation_1.isInt)(data, { abiType: type });
                    break;
                case 'address':
                    result = (0, validation_1.isAddress)(data);
                    break;
                case 'tuple': {
                    throw new Error('"tuple" type is not implemented directly.');
                }
            }
        }
        else {
            switch (type) {
                case 'hex':
                    result = (0, validation_1.isHexStrict)(data);
                    break;
                case 'number':
                    result = (0, validation_1.isNumber)(data);
                    break;
                case 'blockNumber':
                    result = (0, validation_1.isBlockNumber)(data);
                    break;
                case 'blockNumberOrTag':
                    result = (0, validation_1.isBlockNumberOrTag)(data);
                    break;
                case 'filter':
                    result = (0, validation_1.isFilterObject)(data);
                    break;
                case 'bloom':
                    result = (0, validation_1.isBloom)(data);
                    break;
                default:
                    validate.errors = [createErrorObject(`can not identity "${type}"`, data)];
                    return false;
            }
        }
        if (!result) {
            validate.errors = [createErrorObject(`must pass "${type}" validation`, data)];
        }
        return result;
    };
    return validate;
};
exports.ethKeyword = {
    keyword: 'eth',
    compile,
    errors: true,
    modifying: false,
    metaSchema: exports.metaSchema,
};
//# sourceMappingURL=eth.js.map