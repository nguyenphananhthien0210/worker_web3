"use strict";
/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBytes = exports.isBuffer = void 0;
const utils_1 = require("../utils");
const string_1 = require("./string");
/**
 * checks input if typeof data is valid buffer input
 */
const isBuffer = (data) => Buffer.isBuffer(data);
exports.isBuffer = isBuffer;
const isBytes = (value, options = {
    abiType: 'bytes',
}) => {
    if (typeof value !== 'string' &&
        !Buffer.isBuffer(value) &&
        !Array.isArray(value) &&
        !(value instanceof Uint8Array)) {
        return false;
    }
    // isHexStrict also accepts - prefix which can not exists in bytes
    if (typeof value === 'string' && (0, string_1.isHexStrict)(value) && value.startsWith('-')) {
        return false;
    }
    if (typeof value === 'string' && !(0, string_1.isHexStrict)(value)) {
        return false;
    }
    let valueToCheck;
    if (typeof value === 'string' && (0, string_1.isHexStrict)(value)) {
        valueToCheck = Buffer.from(value.substring(2), 'hex');
    }
    else if (Array.isArray(value)) {
        if (value.some(d => d < 0)) {
            return false;
        }
        if (value.some(d => d > 255)) {
            return false;
        }
        if (value.some(d => !Number.isInteger(d))) {
            return false;
        }
        valueToCheck = Buffer.from(value);
    }
    else if (value instanceof Uint8Array) {
        valueToCheck = Buffer.from(value);
    }
    else {
        valueToCheck = value;
    }
    if (options === null || options === void 0 ? void 0 : options.abiType) {
        const { baseTypeSize } = (0, utils_1.parseBaseType)(options.abiType);
        return baseTypeSize ? valueToCheck.length === baseTypeSize : true;
    }
    if (options === null || options === void 0 ? void 0 : options.size) {
        return valueToCheck.length === (options === null || options === void 0 ? void 0 : options.size);
    }
    return true;
};
exports.isBytes = isBytes;
//# sourceMappingURL=bytes.js.map