/*
This file is part of web3.js.

web3.js is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

web3.js is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
import Ajv from 'ajv';
import { blake2b } from 'ethereum-cryptography/blake2b';
import { utf8ToBytes, toHex } from 'ethereum-cryptography/utils';
import { ethAbiToJsonSchema } from './utils';
import { ethKeyword } from './keywords/eth';
import { Web3ValidatorError } from './errors';
import * as formats from './formats';
export class Web3Validator {
    constructor() {
        this._validator = new Ajv({
            strict: true,
            strictSchema: true,
            allErrors: true,
            useDefaults: false,
            // To avoid warnings for not defining `type` for each property
            strictTypes: false,
            // To avoid strict mode error for minItems or maxItems/additionalItems
            strictTuples: false,
        });
        this._validator.addKeyword(ethKeyword);
        for (const formatName of Object.keys(formats)) {
            // eslint-disable-next-line import/namespace
            this._validator.addFormat(formatName, formats[formatName]);
        }
    }
    validateJSONSchema(schema, data, options) {
        let errors = [];
        if (!this._validator.validate(schema, data)) {
            errors = this._validator.errors;
        }
        if (options === null || options === void 0 ? void 0 : options.silent) {
            return errors;
        }
        if (errors.length && !(options === null || options === void 0 ? void 0 : options.silent)) {
            throw new Web3ValidatorError(errors);
        }
        return undefined;
    }
    validate(schema, data, options = { silent: false }) {
        var _a, _b;
        const jsonSchema = ethAbiToJsonSchema(schema);
        if (Array.isArray(jsonSchema.items) &&
            ((_a = jsonSchema.items) === null || _a === void 0 ? void 0 : _a.length) === 0 &&
            data.length === 0) {
            return undefined;
        }
        if (Array.isArray(jsonSchema.items) &&
            ((_b = jsonSchema.items) === null || _b === void 0 ? void 0 : _b.length) === 0 &&
            data.length !== 0) {
            throw new Web3ValidatorError([
                {
                    instancePath: '/0',
                    schemaPath: '/',
                    keyword: 'required',
                    message: 'empty schema against data can not be validated',
                    params: data,
                },
            ]);
        }
        const schemaKey = toHex(blake2b(utf8ToBytes(JSON.stringify(jsonSchema))));
        if (!this._validator.getSchema(schemaKey)) {
            this._validator.addSchema(jsonSchema, schemaKey);
        }
        if (!this._validator.validate(schemaKey, data)) {
            const errors = this._validator.errors;
            if (options === null || options === void 0 ? void 0 : options.silent) {
                return errors;
            }
            if (errors.length && !(options === null || options === void 0 ? void 0 : options.silent)) {
                throw new Web3ValidatorError(errors);
            }
        }
        return undefined;
    }
}
//# sourceMappingURL=web3_validator.js.map